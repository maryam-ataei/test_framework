/*
 *****************************************************************************
 *  Automatocally generated search_defs.h
 *  ----------------------------------------------------------------------------
 *  This header file was automatically generated by the `generate_module.py` script
 *  on 2025-03-18 11:25:12.
 *  It defines constants, structures, and function declarations for the SEARCH module.
 *
 *  These contents are extracted automatically from the **source file**: `tcp_cubic_search3.0_withu16_without_log_app_limited.c`,
 *  specifically from sections labeled `SEARCH_DEFS`.
 *  
 *  ⚠ WARNING: 
 *  If you modify this file directly, rerunning `generate_module.py` will overwrite your changes.
 *  
 *  ✅ To prevent losing your modifications:
 *  You can only modify the **source file**.
 *****************************************************************************
 */

#ifndef SEARCH_DEFS_H
#define SEARCH_DEFS_H

#include <stdint.h>
#include <string.h>
#include "tcp.h"
#include "cc_helper_function.h"


#define MAX_US_INT 0xffff 
#define SEARCH_BINS 10		/* Number of bins in a window */
#define SEARCH_EXTRA_BINS 15 /* Number of additional bins to cover data after shiftting by RTT */
#define SEARCH_TOTAL_BINS 25 	/* Total number of bins containing essential
				   bins to cover RTT shift */

enum unset_bin_duration {
    UNSET_BIN_DURATION_FALSE,  // Reset bin duration
    UNSET_BIN_DURATION_TRUE    // Do not reset bin duration
}; //

/* BIC TCP Parameters */
struct bictcp {
	u32	cnt;		/* increase cwnd by 1 after ACKs */
	u32	last_max_cwnd;	/* last maximum snd_cwnd */
	u32	last_cwnd;	/* the last snd_cwnd */
	u32	last_time;	/* time when updated last_cwnd */
	u32	bic_origin_point;/* origin point of bic function */
	u32	bic_K;		/* time to origin point
				   from the beginning of the current epoch */
	u32	delay_min;	/* min delay (usec) */
	u32	epoch_start;	/* beginning of an epoch */
	u32	ack_cnt;	/* number of acks */
	u32	tcp_cwnd;	/* estimated tcp cwnd */

	/* Union of HyStart and SEARCH variables */
	union {
		/* HyStart variables */
		struct {
			u16	unused;
			u8	sample_cnt;/* number of samples to decide curr_rtt */
			u8	found;		/* the exit point is found? */
			u32	round_start;	/* beginning of each round */
			u32	end_seq;	/* end_seq of the round */
			u32	last_ack;	/* last time when the ACK spacing is close */
			u32	curr_rtt;	/* the minimum rtt of current round */
		}hystart;

		/* SEARCH variables */
		struct {
			u32	bin_duration_us;	/* duration of each bin in microsecond */
			s32	curr_idx;	/* total number of bins */
			u32	bin_end_us;	/* end time of the latest bin in microsecond */
			u16	bin[SEARCH_TOTAL_BINS];	/* array to keep bytes for bins */
			u8	unused;
			u8	scale_factor;	/* scale factor to fit the value with bin size*/
		}search;
	};
};

extern void bictcp_search_reset(struct bictcp *ca, enum unset_bin_duration flag);
extern u32 bictcp_clock_us(const struct sock *sk);
extern u8 search_bit_shifting(struct sock *sk, u64 bin_value);
extern void search_init_bins(struct sock *sk, u32 now_us, u32 rtt_us);
extern void search_update_bins(struct sock *sk, u32 now_us, u32 rtt_us);
extern u64 search_compute_delivered_window(struct sock *sk, s32 left, s32 right, u32 fraction);
extern void search_exit_slow_start(struct sock *sk, u32 now_us, u32 rtt_us);
extern void search_update(struct sock *sk, u32 rtt_us);


#endif // SEARCH_DEFS_H
