/*
 *****************************************************************************
 *  Automatocally generated hystart_defs.h
 *  ----------------------------------------------------------------------------
 *  This header file was automatically generated by the `generate_module.py` script
 *  on 2025-03-03 17:26:37.
 *  It defines constants, structures, and function declarations for the HYSTART module.
 *
 *  These contents are extracted automatically from the **source file**: `tcp_cubic.c`,
 *  specifically from sections labeled `HYSTART_DEFS`.
 *  
 *  ⚠ WARNING: 
 *  If you modify this file directly, rerunning `generate_module.py` will overwrite your changes.
 *  
 *  ✅ To prevent losing your modifications:
 *  You can only modify the **source file**.
 *****************************************************************************
 */

#ifndef HYSTART_DEFS_H
#define HYSTART_DEFS_H

#include <stdint.h>
#include <string.h>
#include "tcp.h"
#include "cc_helper_function.h"

extern void bictcp_reset(struct bictcp *ca);
extern u32 bictcp_clock_us(const struct sock *sk);
extern void bictcp_hystart_reset(struct sock *sk);
extern u32 hystart_ack_delay(struct sock *sk);
extern void hystart_update(struct sock *sk, u32 delay);

#define BICTCP_BETA_SCALE    1024	/* Scale factor beta calculation
					 * max_cwnd = snd_cwnd * beta
					 */
#define	BICTCP_HZ		10	/* BIC HZ 2^10 = 1024 */

/* Two methods of hybrid slow start */
#define HYSTART_ACK_TRAIN	0x1
#define HYSTART_DELAY		0x2

/* Number of delay samples for detecting the increase of delay */
#define HYSTART_MIN_SAMPLES	8
#define HYSTART_DELAY_MIN	(4000U)	/* 4 ms */
#define HYSTART_DELAY_MAX	(16000U)	/* 16 ms */
#define HYSTART_DELAY_THRESH(x)	clamp(x, HYSTART_DELAY_MIN, HYSTART_DELAY_MAX)

/* BIC TCP Parameters */
struct bictcp {
	u32	cnt;		/* increase cwnd by 1 after ACKs */
	u32	last_max_cwnd;	/* last maximum snd_cwnd */
	u32	last_cwnd;	/* the last snd_cwnd */
	u32	last_time;	/* time when updated last_cwnd */
	u32	bic_origin_point;/* origin point of bic function */
	u32	bic_K;		/* time to origin point
				   from the beginning of the current epoch */
	u32	delay_min;	/* min delay (usec) */
	u32	epoch_start;	/* beginning of an epoch */
	u32	ack_cnt;	/* number of acks */
	u32	tcp_cwnd;	/* estimated tcp cwnd */
	u16	unused;
	u8	sample_cnt;	/* number of samples to decide curr_rtt */
	u8	found;		/* the exit point is found? */
	u32	round_start;	/* beginning of each round */
	u32	end_seq;	/* end_seq of the round */
	u32	last_ack;	/* last time when the ACK spacing is close */
	u32	curr_rtt;	/* the minimum rtt of current round */
};

#endif // HYSTART_DEFS_H
